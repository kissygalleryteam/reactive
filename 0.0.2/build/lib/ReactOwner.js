define("kg/react/0.0.2/lib/ReactOwner",["./emptyObject","./invariant"],function(e,n,t){"use strict";var o=e("./emptyObject"),a=e("./invariant"),r={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,n,t){"production"!==process.env.NODE_ENV?a(r.isValidOwner(t),"addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):a(r.isValidOwner(t)),t.attachRef(n,e)},removeComponentAsRefFrom:function(e,n,t){"production"!==process.env.NODE_ENV?a(r.isValidOwner(t),"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):a(r.isValidOwner(t)),t.refs[n]===e&&t.detachRef(n)},Mixin:{construct:function(){this.refs=o},attachRef:function(e,n){"production"!==process.env.NODE_ENV?a(n.isOwnedBy(this),"attachRef(%s, ...): Only a component's owner can store a ref to it.",e):a(n.isOwnedBy(this));var t=this.refs===o?this.refs={}:this.refs;t[e]=n},detachRef:function(e){delete this.refs[e]}}};t.exports=r});