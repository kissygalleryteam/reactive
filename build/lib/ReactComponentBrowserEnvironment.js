define("kg/react/0.0.2/lib/ReactComponentBrowserEnvironment",["./ReactDOMIDOperations","./ReactMarkupChecksum","./ReactMount","./ReactPerf","./ReactReconcileTransaction","./getReactRootElementInContainer","./invariant","./setInnerHTML"],function(e,n,t){"use strict";var o=e("./ReactDOMIDOperations"),r=e("./ReactMarkupChecksum"),a=e("./ReactMount"),s=e("./ReactPerf"),i=e("./ReactReconcileTransaction"),c=e("./getReactRootElementInContainer"),u=e("./invariant"),d=e("./setInnerHTML"),p=1,m=9,h={ReactReconcileTransaction:i,BackendIDOperations:o,unmountIDFromEnvironment:function(e){a.purgeID(e)},mountImageIntoNode:s.measure("ReactComponentBrowserEnvironment","mountImageIntoNode",function(e,n,t){if("production"!==process.env.NODE_ENV?u(n&&(n.nodeType===p||n.nodeType===m),"mountComponentIntoNode(...): Target container is not valid."):u(n&&(n.nodeType===p||n.nodeType===m)),t){if(r.canReuseMarkup(e,c(n)))return;"production"!==process.env.NODE_ENV?u(n.nodeType!==m,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side."):u(n.nodeType!==m),"production"!==process.env.NODE_ENV&&console.warn("React attempted to use reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server.")}"production"!==process.env.NODE_ENV?u(n.nodeType!==m,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See renderComponentToString() for server rendering."):u(n.nodeType!==m),d(n,e)})};t.exports=h});